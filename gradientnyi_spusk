import numpy as np
import matplotlib.pyplot as plt
from typing import List, Tuple

# Функция: f(x) = x^2 + 3*sin(x) - 2*ln(x + 1)


def gradient_descend(
    func=lambda x: x**2,
    diff_func=lambda x: 2*x,
    x0: float = 3.0,
    speed: float = 0.01,
    epochs: int = 100
) -> Tuple[List[float], List[float]]:
   
    x_list = []
    y_list = []
    x = x0
    
    for _ in range(epochs):
        x_list.append(x)
        y_list.append(func(x))
        
        x = x - speed * diff_func(x)
    
    return x_list, y_list

def find_critical_speed(
    func,
    diff_func,
    x0: float = 3.0,
    max_speed: float = 1.0,
    epochs: int = 100,
    tolerance: float = 0.1
) -> float:
    
    low = 0.0
    high = max_speed
    
    for _ in range(20):
        mid = (low + high) / 2
        x_list, _ = gradient_descend(func, diff_func, x0, mid, epochs)
        
        if abs(x_list[-1] - x_list[-2]) < tolerance:
            low = mid
        else:
            high = mid
    
    return (low + high) / 2

def main():
    func = lambda x: x**2 + 3*np.sin(x) - 2*np.log(x + 1)
    diff_func = lambda x: 2*x + 3*np.cos(x) - 2/(x + 1)
    
    x0 = 3.0
    speed = 0.1
    epochs = 100
    
    x_list, y_list = gradient_descend(func, diff_func, x0, speed, epochs)
    
    critical_speed = find_critical_speed(func, diff_func, x0)
    print(f"Граничное значение скорости обучения: {critical_speed:.4f}")
    
    plt.figure(figsize=(12, 6))
    
    x_vals = np.linspace(-1, 3, 400)
    y_vals = func(x_vals)
    plt.plot(x_vals, y_vals, label='f(x) = x² + 3sin(x) - 2ln(x+1)', color='blue')
    
    plt.scatter(x_list, y_list, color='red', label='Точки градиентного спуска')
    
    plt.plot(x_list, y_list, 'r--', alpha=0.3)
    
    min_x = 0.5 
    min_y = func(min_x)
    plt.scatter([min_x], [min_y], color='green', marker='*', s=200, label='Искомый минимум')
    
    plt.title('Метод градиентного спуска')
    plt.xlabel('x')
    plt.ylabel('f(x)')
    plt.legend()
    plt.grid(True)
    plt.show()
    
    final_x = x_list[-1]
    if abs(final_x - min_x) < 0.2:
        print(f"Результат сошёлся к минимуму: x = {final_x:.4f}")
    else:
        print(f"Результат не сошёлся к минимуму. Конечная точка: x = {final_x:.4f}")

if __name__ == "__main__":
    main()

